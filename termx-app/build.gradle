plugins {
  id("io.micronaut.minimal.library") apply false
  id("io.micronaut.minimal.application")
  id("com.github.johnrengelman.shadow")
}

dependencies {
  annotationProcessor "io.micronaut.openapi:micronaut-openapi"
  annotationProcessor "io.micronaut.spring:micronaut-spring-annotation"

  implementation project(':termx-api')
  implementation project(':termx-core')
  implementation project(':terminology')
  implementation project(':snomed')
  implementation project(':ucum')
  implementation project(':observation-definition')
  implementation project(':wiki')
  implementation project(':task-taskflow')
  implementation project(':modeler')
  implementation project(':implementation-guide')
  implementation project(':uam')

  implementation project(':edition-int')
  implementation project(':edition-est')
  implementation project(':edition-uzb')

  implementation("com.kodality.commons:commons-micronaut:${rootProject.commonsMicronautVersion}")
  implementation("com.kodality.commons:commons-db:${rootProject.commonsVersion}")
  implementation("com.kodality.commons:commons-cache:${rootProject.commonsVersion}")
  implementation("com.kodality.commons:commons-http-client:${rootProject.commonsVersion}")

  implementation("com.kodality.kefhir:fhir-rest:${kefhirVersion}") { changing = true }
  implementation("com.kodality.kefhir:validation-profile:${kefhirVersion}") { changing = true }
  implementation("com.kodality.kefhir:openapi:${kefhirVersion}") { changing = true }

  implementation("io.micronaut:micronaut-runtime")
  implementation("io.micronaut:micronaut-http-server-netty")
  implementation("io.micronaut.liquibase:micronaut-liquibase")
  implementation("io.micronaut.spring:micronaut-spring")
  implementation("io.micronaut.data:micronaut-data-spring-jdbc")
  implementation("io.micronaut.validation:micronaut-validation")
  implementation("io.micronaut:micronaut-management")
  implementation("io.micronaut.micrometer:micronaut-micrometer-registry-prometheus")
  implementation("io.micronaut.openapi:micronaut-openapi")
  implementation 'org.liquibase:liquibase-core:4.24.0' //rewrite micronauts liquibase version to a fresher one

  implementation("com.fasterxml.jackson.core:jackson-core:${rootProject.jacksonVersion}")
  implementation("com.fasterxml.jackson.core:jackson-databind:${rootProject.jacksonVersion}")
  implementation("io.reactivex.rxjava3:rxjava:3.1.8")
  implementation("io.swagger.core.v3:swagger-annotations")
  implementation("com.auth0:java-jwt:4.0.0")
  implementation('com.auth0:jwks-rsa:0.22.1')

  runtimeOnly 'io.micronaut:micronaut-jackson-databind'
  runtimeOnly "ch.qos.logback:logback-classic:1.4.7"

  testCompileOnly("org.projectlombok:lombok:1.18.30")
  testAnnotationProcessor("org.projectlombok:lombok:1.18.30")
  testImplementation("io.micronaut.test:micronaut-test-spock:3.9.2")
  testImplementation("org.spockframework:spock-core:2.3-groovy-3.0") {
    exclude group: "org.codehaus.groovy", module: "groovy-all"
  }
//  testImplementation("org.codehaus.groovy:groovy-sql:3.0.16")
  testImplementation("org.apache.commons:commons-lang3:3.12.0")
  testImplementation("org.testcontainers:postgresql")
  testImplementation("org.testcontainers:spock")
  testImplementation("org.testcontainers:testcontainers")
  testImplementation("commons-io:commons-io:2.15.0")
}

application {
  mainClass.set("com.kodality.termx.TermxApplication")
}

micronaut {
  runtime("netty")
}

shadowJar {
  zip64 true
  mergeServiceFiles {
    exclude 'META-INF/services/org.xmlpull.v1.XmlPullParserFactory'
  }
}

run {
  if (project.hasProperty('debug')) {
    jvmArgs += ['-Xdebug', "-Xrunjdwp:transport=dt_socket,address=" + project.getProperty('debug') + ",server=y,suspend=n"]
  }
  if (project.hasProperty('dev')) {
    jvmArgs += ['-Dauth.dev.allowed=true', '-Dmicronaut.environments=dev,local']
  }
}

